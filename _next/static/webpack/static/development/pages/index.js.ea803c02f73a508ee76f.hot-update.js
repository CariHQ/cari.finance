webpackHotUpdate("static/development/pages/index.js",{

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Index; });
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_Layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/Layout */ "./components/Layout.tsx");
var _jsxFileName = "/Users/kengeo/Projects/cari-site/pages/index.tsx";


var __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;
// pages/index.tsx

function Index() {
  return __jsx(_components_Layout__WEBPACK_IMPORTED_MODULE_2__["default"], {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 7
    },
    __self: this
  }, __jsx("section", {
    id: "hero",
    className: "jsx-2697947972",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 8
    },
    __self: this
  }, __jsx("div", {
    className: "jsx-2697947972",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 9
    },
    __self: this
  }, __jsx("h1", {
    className: "jsx-2697947972",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10
    },
    __self: this
  }, "Your information, ", __jsx("br", {
    className: "jsx-2697947972",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10
    },
    __self: this
  }), __jsx("i", {
    className: "jsx-2697947972",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10
    },
    __self: this
  }, "always with you.")), __jsx("p", {
    className: "jsx-2697947972" + " " + "subhead",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11
    },
    __self: this
  }, "We simplify important life events and make your records accessible in one secure place to save time and money.")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    id: "2697947972",
    __self: this
  }, "section#hero.jsx-2697947972{background:url('../assets/i/header-background.png') bottom right no-repeat;background-size:contain;height:400px;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.subhead.jsx-2697947972{color:#999;}section#hero.jsx-2697947972 div.jsx-2697947972{width:50%;}@media (max-width:600px){}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/kengeo/Projects/cari-site/pages/index.tsx */")), __jsx("section", {
    className: "jsx-2579228708",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 33
    },
    __self: this
  }, __jsx("h2", {
    className: "jsx-2579228708",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34
    },
    __self: this
  }, "Your new toolbox for digital identity"), __jsx("p", {
    className: "jsx-2579228708" + " " + "subhead",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 35
    },
    __self: this
  }, "We help organizations of every size to provide seamless digital identification experiences to their customers."), __jsx("div", {
    className: "jsx-2579228708" + " " + "box",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 37
    },
    __self: this
  }, __jsx("div", {
    className: "jsx-2579228708",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 38
    },
    __self: this
  }, "Your information is accessible using a secure and encrypted card or our online dashboard using your digital ID."), __jsx("div", {
    className: "jsx-2579228708",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 39
    },
    __self: this
  }, "Your information is accessible using a secure and encrypted card or our online dashboard using your digital ID."), __jsx("div", {
    className: "jsx-2579228708",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 40
    },
    __self: this
  }, "Your information is accessible using a secure and encrypted card or our online dashboard using your digital ID."), __jsx("div", {
    className: "jsx-2579228708",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 41
    },
    __self: this
  }, "Your information is accessible using a secure and encrypted card or our online dashboard using your digital ID.")), __jsx("h2", {
    className: "jsx-2579228708",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 44
    },
    __self: this
  }, "Easily implement digital identity and storage into your current infrastructure with one API"), __jsx("p", {
    className: "jsx-2579228708" + " " + "subhead",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 45
    },
    __self: this
  }, "We smooth over the differences between identity systems, so you only need one integration. As we add new providers, you can turn them on in one click."), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    id: "2579228708",
    __self: this
  }, "section.jsx-2579228708{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column wrap;-ms-flex-flow:column wrap;flex-flow:column wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center;padding:5rem 0;max-width:60%;margin:auto;}h2.jsx-2579228708{margin-bottom:.3rem;}div.box.jsx-2579228708{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;margin:3rem 0;}div.box.jsx-2579228708 div.jsx-2579228708{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:space-around;-webkit-justify-content:space-around;-ms-flex-pack:space-around;justify-content:space-around;width:50%;margin-bottom:40px;}@media (max-width:600px){}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/kengeo/Projects/cari-site/pages/index.tsx */")), __jsx("div", {
    id: "early-access",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 81
    },
    __self: this
  }), __jsx("section", {
    className: "jsx-422648654",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 83
    },
    __self: this
  }, __jsx("div", {
    className: "jsx-422648654" + " " + "part",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 84
    },
    __self: this
  }, __jsx("h3", {
    className: "jsx-422648654",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 85
    },
    __self: this
  }, "Looking for easly access?"), __jsx("p", {
    className: "jsx-422648654",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 86
    },
    __self: this
  }, "A number of companies are already using Cari in production. Give us your work email and we will be in touch soon.")), __jsx("div", {
    className: "jsx-422648654" + " " + "part",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 88
    },
    __self: this
  }, __jsx("div", {
    className: "jsx-422648654" + " " + "signup",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89
    },
    __self: this
  }, __jsx("input", {
    className: "jsx-422648654",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 90
    },
    __self: this
  }), __jsx("button", {
    className: "jsx-422648654",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91
    },
    __self: this
  }, "Signup"))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    id: "422648654",
    __self: this
  }, "section.jsx-422648654{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:row nowrap;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:#EFF1FE;border-radius:5px;margin-top:100px;}section.jsx-422648654 .part.jsx-422648654{width:50%;padding:10px 30px;}section.jsx-422648654 h3.jsx-422648654{margin-bottom:0;}section.jsx-422648654 p.jsx-422648654{margin-top:0;}.signup.jsx-422648654{width:100%;background:#fff;padding:0;box-sizing:border-box;border-radius:5px;position:relative;}.signup.jsx-422648654 input.jsx-422648654{width:100%;border:0;height:40px;outline:0;font-size:100%;margin:0;box-sizing:border-box;padding:10px;border-radius:5px;}.signup.jsx-422648654 button.jsx-422648654{height:30px;border:0;background:#265DC2;border-radius:5px;outline:0;color:#fff;font-weight:bold;margin:0;padding:5px 10px;position:absolute;top:5px;right:6px;bottom:0;}.signup.jsx-422648654 button.jsx-422648654:hover{background:#269DC2;}@media (max-width:600px){}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/kengeo/Projects/cari-site/pages/index.tsx */")), __jsx("section", {
    className: "jsx-3954232365",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 230
    },
    __self: this
  }, __jsx("h2", {
    className: "jsx-3954232365",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 231
    },
    __self: this
  }, "A new identity experience"), __jsx("p", {
    className: "jsx-3954232365" + " " + "subhead",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 232
    },
    __self: this
  }, "Behind the scenes, we\u2019re working on a new identity management application to give identity agents access to all the powerful features Cari has to offer."), __jsx("img", {
    src: "",
    className: "jsx-3954232365",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 234
    },
    __self: this
  }), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    id: "3954232365",
    __self: this
  }, "section.jsx-3954232365{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column wrap;-ms-flex-flow:column wrap;flex-flow:column wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:5rem 0;text-align:center;max-width:60%;margin:auto;}@media (max-width:600px){}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/kengeo/Projects/cari-site/pages/index.tsx */")), __jsx("section", {
    className: "jsx-62881220",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 253
    },
    __self: this
  }, __jsx("div", {
    className: "jsx-62881220",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 254
    },
    __self: this
  }, __jsx("h2", {
    className: "jsx-62881220",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 255
    },
    __self: this
  }, "Our purpose"), __jsx("p", {
    className: "jsx-62881220" + " " + "subhead",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 256
    },
    __self: this
  }, "Whether it\u2019s traveling to see family, starting a new business, or getting a bank loan, identity is an essential part of our lives. Yet we've all experienced the aches and pains of getting to gathering physical documents. Today, more than 1 billion people are without proper identification and have no way to prove who they are."), __jsx("p", {
    className: "jsx-62881220" + " " + "subhead",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 257
    },
    __self: this
  }, "That\u2019s why we\u2019ve started to rebuild the infrastructure that underpins the identity industry. Layer by layer, piece by piece, we\u2019re building the tools that make identity effortless for today's citizens, both online and offline.")), __jsx("img", {
    src: "",
    className: "jsx-62881220",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 259
    },
    __self: this
  }), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {
    id: "62881220",
    __self: this
  }, "section.jsx-62881220{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column wrap;-ms-flex-flow:column wrap;flex-flow:column wrap;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:5rem 0;}section.jsx-62881220 div.jsx-62881220{width:60%;text-align:center;}@media (max-width:600px){}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/kengeo/Projects/cari-site/pages/index.tsx */")));
}

/***/ })

})
//# sourceMappingURL=index.js.ea803c02f73a508ee76f.hot-update.js.map